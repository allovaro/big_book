{"version":3,"sources":["hooks/useScriptRef.js","views/auth/signin/RestLogin.js","views/auth/signin/SignIn1.js"],"names":["useScriptRef","scripted","useRef","useEffect","current","RestLogin","className","rest","dispatcher","useDispatch","scriptedRef","Fragment","initialValues","email","password","submit","validationSchema","Yup","shape","max","required","onSubmit","values","a","setErrors","setStatus","setSubmitting","axios","post","API_SERVER","then","response","data","success","console","log","type","ACCOUNT_INITIALIZE","payload","isLoggedIn","user","token","msg","catch","error","err","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","noValidate","label","placeholder","name","onBlur","onChange","value","sm","variant","id","htmlFor","mt","color","disabled","size","Signin1","Body","to","target","href","rel"],"mappings":"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","file":"static/js/21.841bd2e6.chunk.js","sourcesContent":["import { useRef, useEffect } from 'react';\n\nconst useScriptRef = () => {\n    const scripted = useRef(true);\n\n    useEffect(\n        () => () => {\n            scripted.current = false;\n        },\n        []\n    );\n\n    return scripted;\n};\n\nexport default useScriptRef;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Row, Col, Button, Alert } from 'react-bootstrap';\n\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport axios from 'axios';\nimport useScriptRef from '../../../hooks/useScriptRef';\nimport { API_SERVER } from './../../../config/constant';\nimport { ACCOUNT_INITIALIZE } from './../../../store/actions';\n\nconst RestLogin = ({ className, ...rest }) => {\n    const dispatcher = useDispatch();\n    const scriptedRef = useScriptRef();\n\n    return (\n        <React.Fragment>\n            <Formik\n                initialValues={{\n                    email: '',\n                    password: '',\n                    submit: null\n                }}\n                validationSchema={Yup.object().shape({\n                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n                    password: Yup.string().max(255).required('Password is required')\n                })}\n                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\n                    try {\n                        axios\n                            .post(API_SERVER + 'users/login', {\n                                password: values.password,\n                                email: values.email\n                            })\n                            .then(function (response) {\n                                if (response.data.success) {\n                                    console.log(response.data);\n                                    dispatcher({\n                                        type: ACCOUNT_INITIALIZE,\n                                        payload: { isLoggedIn: true, user: response.data.user, token: response.data.token }\n                                    });\n                                    if (scriptedRef.current) {\n                                        setStatus({ success: true });\n                                        setSubmitting(false);\n                                    }\n                                } else {\n                                    setStatus({ success: false });\n                                    setErrors({ submit: response.data.msg });\n                                    setSubmitting(false);\n                                }\n                            })\n                            .catch(function (error) {\n                                console.log(error);\n                                setStatus({ success: false });\n                                setErrors({ submit: error.response.data.msg });\n                                setSubmitting(false);\n                            });\n                    } catch (err) {\n                        console.error(err);\n                        if (scriptedRef.current) {\n                            setStatus({ success: false });\n                            setErrors({ submit: err.message });\n                            setSubmitting(false);\n                        }\n                    }\n                }}\n            >\n                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\n                    <form noValidate onSubmit={handleSubmit} className={className} {...rest}>\n                        <div className=\"form-group mb-3\">\n                            <input\n                                className=\"form-control\"\n                                error={touched.email && errors.email}\n                                label=\"Email Address\"\n                                placeholder=\"Email Address\"\n                                name=\"email\"\n                                onBlur={handleBlur}\n                                onChange={handleChange}\n                                type=\"email\"\n                                value={values.email}\n                            />\n                            {touched.email && errors.email && <small className=\"text-danger form-text\">{errors.email}</small>}\n                        </div>\n                        <div className=\"form-group mb-4\">\n                            <input\n                                className=\"form-control\"\n                                error={touched.password && errors.password}\n                                label=\"Password\"\n                                placeholder=\"Password\"\n                                name=\"password\"\n                                onBlur={handleBlur}\n                                onChange={handleChange}\n                                type=\"password\"\n                                value={values.password}\n                            />\n                            {touched.password && errors.password && <small className=\"text-danger form-text\">{errors.password}</small>}\n                        </div>\n\n                        {errors.submit && (\n                            <Col sm={12}>\n                                <Alert variant=\"danger\">{errors.submit}</Alert>\n                            </Col>\n                        )}\n\n                        <div className=\"custom-control custom-checkbox  text-left mb-4 mt-2\">\n                            <input type=\"checkbox\" className=\"custom-control-input\" id=\"customCheck1\" />\n                            <label className=\"custom-control-label\" htmlFor=\"customCheck1\">\n                                Save credentials.\n                            </label>\n                        </div>\n\n                        <Row>\n                            <Col mt={2}>\n                                <Button\n                                    className=\"btn-block\"\n                                    color=\"primary\"\n                                    disabled={isSubmitting}\n                                    size=\"large\"\n                                    type=\"submit\"\n                                    variant=\"primary\"\n                                >\n                                    Sign IN\n                                </Button>\n                            </Col>\n                        </Row>\n                    </form>\n                )}\n            </Formik>\n            <hr />\n        </React.Fragment>\n    );\n};\n\nexport default RestLogin;\n","import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport { NavLink } from 'react-router-dom';\n\nimport Breadcrumb from '../../../layouts/AdminLayout/Breadcrumb';\n\nimport RestLogin from './RestLogin';\n\nconst Signin1 = () => {\n    return (\n        <React.Fragment>\n            <Breadcrumb />\n            <div className=\"auth-wrapper\">\n                <div className=\"auth-content\">\n                    <div className=\"auth-bg\">\n                        <span className=\"r\" />\n                        <span className=\"r s\" />\n                        <span className=\"r s\" />\n                        <span className=\"r\" />\n                    </div>\n                    <Card className=\"borderless text-center\">\n                        <Card.Body>\n                            <h4 className=\"mb-4\">Big Book</h4>\n\n                            <div className=\"mb-4\">\n                                <i className=\"feather icon-unlock auth-icon\" />\n                            </div>\n\n                            <RestLogin />\n\n                            <p className=\"mb-0 text-muted\">\n                                Don’t have an account?{' '}\n                                <NavLink to=\"/auth/signup\" className=\"f-w-400\">\n                                    Sign UP\n                                </NavLink>\n                            </p>\n\n                            <br />\n\n                            <p className=\"mb-0 text-muted\">\n                                &copy;{' '}\n                                <a target=\"_blank\" href=\"https://codedthemes.com/\" rel=\"noreferrer\">\n                                    CodedThemes\n                                </a>\n                                -{' '}\n                                <a target=\"_blank\" href=\"https://appseed.us\" rel=\"noreferrer\">\n                                    AppSeed\n                                </a>\n                                .\n                            </p>\n                        </Card.Body>\n                    </Card>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default Signin1;\n"],"sourceRoot":""}