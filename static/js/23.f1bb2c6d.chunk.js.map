{"version":3,"sources":["hooks/useScriptRef.js","views/auth/signup/RestRegister.js","views/auth/signup/SignUp1.js"],"names":["useScriptRef","scripted","useRef","useEffect","current","RestRegister","className","rest","history","useHistory","scriptedRef","Fragment","initialValues","username","email","password","submit","validationSchema","Yup","shape","max","required","onSubmit","values","a","setErrors","setStatus","setSubmitting","axios","post","API_SERVER","then","response","data","success","push","msg","catch","error","err","console","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","noValidate","label","placeholder","name","onBlur","onChange","type","value","Col","sm","Alert","variant","id","htmlFor","Row","mt","Button","color","disabled","size","SignUp1","Breadcrumb","Card","Body","to","target","href","rel"],"mappings":"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","file":"static/js/23.f1bb2c6d.chunk.js","sourcesContent":["import { useRef, useEffect } from 'react';\n\nconst useScriptRef = () => {\n    const scripted = useRef(true);\n\n    useEffect(\n        () => () => {\n            scripted.current = false;\n        },\n        []\n    );\n\n    return scripted;\n};\n\nexport default useScriptRef;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Row, Col, Button, Alert } from 'react-bootstrap';\n\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport axios from 'axios';\nimport useScriptRef from '../../../hooks/useScriptRef';\nimport { API_SERVER } from './../../../config/constant';\n\nconst RestRegister = ({ className, ...rest }) => {\n    let history = useHistory();\n    const scriptedRef = useScriptRef();\n\n    return (\n        <React.Fragment>\n            <Formik\n                initialValues={{\n                    username: '',\n                    email: '',\n                    password: '',\n                    submit: null\n                }}\n                validationSchema={Yup.object().shape({\n                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n                    username: Yup.string().required('Username is required'),\n                    password: Yup.string().max(255).required('Password is required')\n                })}\n                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\n                    try {\n                        axios\n                            .post(API_SERVER + 'users/register', {\n                                username: values.username,\n                                password: values.password,\n                                email: values.email\n                            })\n                            .then(function (response) {\n                                if (response.data.success) {\n                                    history.push('/auth/signin');\n                                } else {\n                                    setStatus({ success: false });\n                                    setErrors({ submit: response.data.msg });\n                                    setSubmitting(false);\n                                }\n                            })\n                            .catch(function (error) {\n                                setStatus({ success: false });\n                                setErrors({ submit: error.response.data.msg });\n                                setSubmitting(false);\n                            });\n                    } catch (err) {\n                        console.error(err);\n                        if (scriptedRef.current) {\n                            setStatus({ success: false });\n                            setErrors({ submit: err.message });\n                            setSubmitting(false);\n                        }\n                    }\n                }}\n            >\n                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\n                    <form noValidate onSubmit={handleSubmit} className={className} {...rest}>\n                        <div className=\"form-group mb-3\">\n                            <input\n                                className=\"form-control\"\n                                error={touched.username && errors.username}\n                                label=\"Username\"\n                                placeholder=\"Username\"\n                                name=\"username\"\n                                onBlur={handleBlur}\n                                onChange={handleChange}\n                                type=\"email\"\n                                value={values.username}\n                            />\n                            {touched.username && errors.username && <small className=\"text-danger form-text\">{errors.username}</small>}\n                        </div>\n                        <div className=\"form-group mb-3\">\n                            <input\n                                className=\"form-control\"\n                                error={touched.email && errors.email}\n                                label=\"Email Address\"\n                                placeholder=\"Email Address\"\n                                name=\"email\"\n                                onBlur={handleBlur}\n                                onChange={handleChange}\n                                type=\"email\"\n                                value={values.email}\n                            />\n                            {touched.email && errors.email && <small className=\"text-danger form-text\">{errors.email}</small>}\n                        </div>\n                        <div className=\"form-group mb-4\">\n                            <input\n                                className=\"form-control\"\n                                error={touched.password && errors.password}\n                                label=\"Password\"\n                                placeholder=\"Password\"\n                                name=\"password\"\n                                onBlur={handleBlur}\n                                onChange={handleChange}\n                                type=\"password\"\n                                value={values.password}\n                            />\n                            {touched.password && errors.password && <small className=\"text-danger form-text\">{errors.password}</small>}\n                        </div>\n\n                        {errors.submit && (\n                            <Col sm={12}>\n                                <Alert variant=\"danger\">{errors.submit}</Alert>\n                            </Col>\n                        )}\n\n                        <div className=\"custom-control custom-checkbox  text-left mb-4 mt-2\">\n                            <input type=\"checkbox\" className=\"custom-control-input\" id=\"customCheck1\" />\n                            <label className=\"custom-control-label\" htmlFor=\"customCheck1\">\n                                Save credentials.\n                            </label>\n                        </div>\n\n                        <Row>\n                            <Col mt={2}>\n                                <Button\n                                    className=\"btn-block\"\n                                    color=\"primary\"\n                                    disabled={isSubmitting}\n                                    size=\"large\"\n                                    type=\"submit\"\n                                    variant=\"primary\"\n                                >\n                                    Sign UP\n                                </Button>\n                            </Col>\n                        </Row>\n                    </form>\n                )}\n            </Formik>\n            <hr />\n        </React.Fragment>\n    );\n};\n\nexport default RestRegister;\n","import React from 'react';\nimport { Card, Row, Col } from 'react-bootstrap';\nimport { NavLink } from 'react-router-dom';\n\nimport RestRegister from './RestRegister';\nimport Breadcrumb from '../../../layouts/AdminLayout/Breadcrumb';\n\nconst SignUp1 = () => {\n    return (\n        <React.Fragment>\n            <Breadcrumb />\n            <div className=\"auth-wrapper\">\n                <div className=\"auth-content\">\n                    <div className=\"auth-bg\">\n                        <span className=\"r\" />\n                        <span className=\"r s\" />\n                        <span className=\"r s\" />\n                        <span className=\"r\" />\n                    </div>\n                    <Card className=\"borderless\">\n                        <Row className=\"align-items-center\">\n                            <Col>\n                                <Card.Body className=\"text-center\">\n                                    <h4 className=\"mb-4\">Big Book</h4>\n\n                                    <div className=\"mb-4\">\n                                        <i className=\"feather icon-user-plus auth-icon\" />\n                                    </div>\n\n                                    <RestRegister />\n\n                                    <p className=\"mb-2\">\n                                        Already have an account?{' '}\n                                        <NavLink to=\"/auth/signin\" className=\"f-w-400\">\n                                            Login\n                                        </NavLink>\n                                    </p>\n\n                                    <br />\n\n                                    <p className=\"mb-0 text-muted\">\n                                        &copy;{' '}\n                                        <a target=\"_blank\" href=\"https://codedthemes.com/\" rel=\"noreferrer\">\n                                            CodedThemes\n                                        </a>\n                                        -{' '}\n                                        <a target=\"_blank\" href=\"https://appseed.us\" rel=\"noreferrer\">\n                                            AppSeed\n                                        </a>\n                                        .\n                                    </p>\n                                </Card.Body>\n                            </Col>\n                        </Row>\n                    </Card>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default SignUp1;\n"],"sourceRoot":""}